#!/usr/bin/env sh

#  This Source Code Form is subject to the terms of the Mozilla Public
#  License, v. 2.0. If a copy of the MPL was not distributed with this
#  file, You can obtain one at https://mozilla.org/MPL/2.0/.

#  Keep the container running and give me a shell prompt when something bad happens
#trap /bin/sh ERR

#  Abend the script and execute the trap when something bad happens
set -e

if [ $(cat /etc/hostname) == "fang.localdomain" ]; then

	#  This section of the script does not run in the podman container, it only
	#  runs on the container's host and drives the overall build process

	#  Set to "true" for quick local testing of the RPM package build process in 
	#  this system's native architecture (x86 I assume, not the UDM's aarch64.)
	#
	#  Set to false to build the RPM and the Docker container for the UDM using 
	#  qemu amd64 emulation.  This is VERY SLOW.  (It takes a little over 2 hours 
	#  on my workstation.)
	#
	#  Need to have installed the QEMU emulation package: qemu-user-static
	TESTBUILD=false

	find ${HOME}/rpmbuild/SRPMS -iname ntopng-\* -delete
	find ${HOME}/rpmbuild/RPMS -iname ntopng-\* -delete
	cd $(dirname $(realpath "$0"))

	sudo systemctl start docker
	if $TESTBUILD; then
		#  Build the RPMs
		echo "Starting RPM build at $(date +%H:%m:%S)"
		docker run --interactive --name=rpmbuild --rm --tty --volume=${HOME}:${HOME} docker.io/library/fedora:latest "$(realpath "$0")" ${HOME}
		echo "RPM build complete at $(date +%H:%m:%S)"
		echo "That took $(elapsed $STARTTIME)"
	else
	
		#  Make sure we know the docker password
		if [ -z "$DOCKER_PASSWORD" ]; then
			echo "Please set the DOCKER_PASSWORD environment variable before running this script:"
			echo "   $ DOCKER_PASSWORD='whatever' $0"
			exit 1
		fi
		
		#  Build the RPMs
		STARTTIME=$(date +%s)
		echo "Starting RPM build at $(date +%H:%m:%S)"
		docker run --platform=linux/arm64 --interactive --name=rpmbuild --rm --tty --volume=${HOME}:${HOME} docker.io/arm64v8/fedora:latest "$(realpath "$0")" ${HOME}
		echo "RPM build complete at $(date +%H:%m:%S)"
		echo "That took $(elapsed $STARTTIME)"
		
		#  Just for the hell of it, send the SRPM to COPR to be built there
		copr build --nowait dlk/rpms ${HOME}/rpmbuild/SRPMS/ntopng*
		
		#  Build the container
		echo "Starting container build at $(date +%H:%m:%S)"
		find -iname ntopng-\*.rpm -delete
		cp ${HOME}/rpmbuild/SRPMS/ntopng* .
		cp ${HOME}/rpmbuild/RPMS/aarch64/ntopng*.aarch64.rpm .
		VERSION=$( ls ntopng*.aarch64.rpm | sed 's/"//g;s/ntopng-\([^-]*\)-.*$/\1/' )
		docker buildx build --no-cache --platform=linux/arm64 -t docker.io/dlk3/ntopng-udm:$VERSION -t docker.io/dlk3/ntopng-udm:latest .
		#docker tag dlk3/ntopng-udm:latest docker.io/dlk3/ntopng-udm:stable
		
		#  Push the images
		echo "$DOCKER_PASSWORD" | docker login --username dlk3 --password-stdin docker.io
		docker push docker.io/dlk3/ntopng-udm:latest
		docker push docker.io/dlk3/ntopng-udm:$VERSION
		#podman push docker.io/dlk3/ntopng-udm:stable
		docker logout docker.io
		
		#  Clean up
		docker image prune --force
		echo "Container build complete at $(date +%H:%m:%S)"
		echo "The entire process took $(elapsed $STARTTIME)"
	fi
	sudo systemctl stop docker

else

	#  This section of the script runs in the podman container to build the ntopng 
	#  RPM packages.

	#  The resulting packages will be copied to the $HOME directory of the user
	#  running this script on the host computer.  That user needs to have the
	#  ~/rpmbuild directory tree set up for this to work.
	TARGETDIR=$1

	dnf groupinstall -y "Development Tools" "RPM Development Tools"
	dnf install -y rpm-build wget git
	dnf upgrade -y

	#  Create the rpmbuild directory tree inside the container
	mkdir -p ${HOME}/rpmbuild/BUILD
	mkdir -p ${HOME}/rpmbuild/BUILDROOT
	mkdir -p ${HOME}/rpmbuild/RPMS
	mkdir -p ${HOME}/rpmbuild/SOURCES
	mkdir -p ${HOME}/rpmbuild/SPECS
	mkdir -p ${HOME}/rpmbuild/SRPMS

	#  Get the spec and other custom files that are part of the build process
	#  and put them into the appropriate places in the rpmbuild tree
	git clone https://github.com/dlk3/udm-hacks.git
	mv udm-hacks/ntopng-udm-fedora/rpmbuild/ntopng.spec ${HOME}/rpmbuild/SPECS/
	mv udm-hacks/ntopng-udm-fedora/rpmbuild/ntopng.conf ${HOME}/rpmbuild/SOURCES/
	mv udm-hacks/ntopng-udm-fedora/rpmbuild/ntopng.service ${HOME}/rpmbuild/SOURCES/
	mv udm-hacks/ntopng-udm-fedora/rpmbuild/ntopng.sysconfig ${HOME}/rpmbuild/SOURCES/
	rm -fr udm-hacks
	
	#  Put tarballs of the program source into the container's rpmbuild/SOURCES directory
	git clone https://github.com/ntop/nDPI.git
	tar -czf ${HOME}/rpmbuild/SOURCES/nDPI.tar.gz nDPI
	rm -fr nDPI
	NAME=$(sed -n 's/^Name:[[:space:]]*//p' ${HOME}/rpmbuild/SPECS/ntopng.spec)
	#git clone https://github.com/ntop/${NAME}.git --branch=5.2.1
	git clone https://github.com/ntop/${NAME}.git
	tar -czf ${HOME}/rpmbuild/SOURCES/${NAME}.tar.gz ${NAME}
	rm -fr ${NAME}

	#  Install the BuildRequires packages listed in the spec file
	PACKAGES=''
	oIFS=$IFS
	IFS=$'\n'
	for LINE in `grep ^BuildRequires: "${HOME}/rpmbuild/SPECS/ntopng.spec"`; do
		PACKAGES+="$(echo $LINE | cut -f2 -d':' | sed 's/,/ /g') "
	done
	IFS=$oIFS
	[ "$PACKAGES" != "" ] && dnf install -y $PACKAGES

	#  Build the package
	rpmbuild -ba "${HOME}/rpmbuild/SPECS/ntopng.spec"
	
	#  Copy the package files out of the container and on to the host
	cp -vr ${HOME}/rpmbuild/RPMS/* ${TARGETDIR}/rpmbuild/RPMS/
	cp -vr ${HOME}/rpmbuild/SRPMS/* ${TARGETDIR}/rpmbuild/SRPMS/
	
fi
