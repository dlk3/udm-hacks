#!/usr/bin/env python3

#  This script configures iptables on the UDM Pro to block all traffic from 
#  the IP addresses that are listed in the ntopng blacklists.
#
#  Copyright (C) 2024  David King <dave@daveking.com>
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License,
#  version 2, as published by the Free Software Foundation.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not,   If not, see 
#  <https://www.gnu.org/licenses/old-licenses/gpl-2.0.html>.

#  A list of the  directories where ntopng keeps the updated copies of blacklists it 
#  downloads and the custom lists the user has defined
ntop_lists_paths = ['/usr/share/ntopng/httpdocs/misc/lists/builtin', '/usr/share/ntopng/httpdocs/misc/lists/custom']

#  Maximum number of elements that can be put into an ipset, default = 65536
maxelem = 524288

#  Configure logging
import logging
logging.basicConfig(format='%(levelname)s: %(message)s', level=logging.INFO)

import subprocess
import ipaddress
import os
import json
import socket
import sys
from optparse import OptionParser

# Make sure that iptables has the rules we need to define a blacklists chain called NTOPNG 
# that logs and drops the packets coming in from blacklisted addresses listed in an ipset
# named ntopng
def mk_iptables_rules():
    
    #  Create the NTOPNG chain that filters packets based on the blacklist sets
    try:
        proc = subprocess.run('iptables -nL NTOPNG', shell=True, check=True, capture_output=True)
        logging.debug('NTOPNG target already exists in iptables')
    except:
        logging.info('defining new NTOPNG target in iptables')
        subprocess.run('iptables -N NTOPNG', shell=True, check=True)

    #  Define the NTOPNGLOGNDROP log and drop target
    try:
        proc = subprocess.run('iptables -nL NTOPNGLOGNDROP', shell=True, check=True, capture_output=True)
        logging.debug('NTOPNGLOGNDROP target already exists in iptables')
    except:
        logging.info('defining new NTOPNGLOGNDROP target in iptables')
        subprocess.run('iptables -N NTOPNGLOGNDROP', shell=True, check=True)
        subprocess.run('iptables -A NTOPNGLOGNDROP -m limit --limit 5/min --limit-burst 10 -j LOG --log-level warning --log-prefix "NTOPNG BLOCK: "', shell=True, check=True)
        subprocess.run('iptables -A NTOPNGLOGNDROP -j DROP', shell=True, check=True)

    #  Add the INPUT rule that routes all traffic to the NTOPNG target
    found = False
    proc = subprocess.run('iptables -nL INPUT', shell=True, check=True, capture_output=True)
    for line in proc.stdout.decode('utf-=8').split('\n'):
        if 'NTOPNG' in line:
            found = True
            logging.debug('NTOPNG target already in the INPUT chain in iptables')
            break
    if not found:
        logging.info('adding NTOPNG target to the INPUT chain in iptables')
        try:
            index = len(proc.stdout.decode('utf-=8').split('\n')) - 3
            subprocess.run('iptables -I INPUT {} -j NTOPNG'.format(index), shell=True, check=True, capture_output=True)
        except:
            pass

    #  Add the FORWARD rule that routes all traffic to the NTOPNG target
    found = False
    proc = subprocess.run('iptables -nL FORWARD', shell=True, check=True, capture_output=True)
    for line in proc.stdout.decode('utf-=8').split('\n'):
        if 'NTOPNG' in line:
            found = True
            logging.debug('NTOPNG target is already in the FORWARD chain in iptables')
            break
    if not found:
        logging.info('adding NTOPNG target to the FORWARD chain in iptables')
        try:
            index = len(proc.stdout.decode('utf-=8').split('\n')) - 3
            subprocess.run('iptables -I FORWARD {}  -j NTOPNG'.format(index), shell=True, check=True, capture_output=True)
        except:
            pass

    # Create the ntopng ipset, if it doesn't already exist
    try:
        subprocess.run('ipset create ntopng "hash:net" maxelem {}'.format(maxelem), shell=True, check=True, capture_output=True)
    except subprocess.CalledProcessError:
        pass

    #  Add the two ntopng ipset filtering rules to the NTOPNG chain
    for ipset_rule in ['ntopng src', 'ntopng dst']:
        found = False
        proc = subprocess.run('iptables -nL NTOPNG', shell=True, check=True, capture_output=True)
        for line in proc.stdout.decode('utf-=8').split('\n'):
            if ipset_rule in line:
                found = True
                logging.debug('"{}" ipset rule already exists in NTOPNG chain'.format(ipset_rule))
                break
        if not found:
            logging.info('adding "{}" ipset rule to the NTOPNG chain'.format(ipset_rule))
            try:
                subprocess.run('iptables -A NTOPNG -m set --match-set {} -j NTOPNGLOGNDROP'.format(ipset_rule), shell=True, check=True, capture_output=True)
            except:
                pass

#  Back out the changes made by mk_iptables_rules()
#  (This is not used, it's included here just for reference.)
def rm_iptables_rules():
    cmds = [
        'iptables -D INPUT -j NTOPNG',
        'iptables -D FORWARD -j NTOPNG',
        'iptables -D NTOPNGLOGNDROP -m limit --limit 5/min --limit-burst 10 -j LOG --log-level warning --log-prefix "NTOPNG BLOCK: "',
        'iptables -D NTOPNGLOGNDROP -j DROP',
        'iptables -D NTOPNG -m set --match-set ntopng src -j NTOPNGLOGNDROP',
        'iptables -D NTOPNG -m set --match-set ntopng dst -j NTOPNGLOGNDROP',
        'iptables -X NTOPNGLOGNDROP',
        'iptables -X NTOPNG',
        'ipset destroy ntopng'
    ]
    for cmd in cmds:
        try:
            subprocess.run(cmd, shell=True, check=True, capture_output=True)
        except:
            pass

#  Find ntopng's "category_lists" directory on the UDM data volumes /volume1 or /data
def find_category_lists_path():
    for ntop_data_path in ['/volume1', '/data']:
        for root, paths, files in os.walk(ntop_data_path):
            for path in paths:
                if path == 'category_lists':
                    return os.path.join(root, path)
    return False

#  Resolve a hostname to an IP address
def resolve_hostname(hostname):
    try:
        for line in socket.getaddrinfo(hostname, 0, family=socket.AF_INET, type=socket.SOCK_STREAM):
            return line[4][0]
    except socket.gaierror:
        pass
    except:
        logging.exception('Exception while resolving hostname: {}'.format(hostname), exc_info=True)

    logging.debug('Unable to resolve hostname: {}'.format(hostname))
    return

#  Check to see if an ip address is in the excluded_address list defined above
def check_if_excluded(ip):
    try:
        ip = ip.split('/')[0]
        def convert_ipv4(ip):
            return tuple(int(n) for n in ip.split('.'))
        for item in excluded_addresses:
            if '-' in item:
                start, end = item.split('-')
            else:
                start = end = item
            if convert_ipv4(start) <= convert_ipv4(ip) <= convert_ipv4(end):
                return True
    except:
        logging.warning('Unexpected exception in check_if_excluded(), "{}" is not excluded'.format(ip), exc_info=True)
    return False
    
def load_list(list_name, ipset_name):
    #  Read this list's data file from ntopng's data directory into a list
    category_lists_path = find_category_lists_path()
    if not category_lists_path:
        logging.critical('Unable to locate ntopng\'s category_lists directory')
        return False
    file_name = os.path.join(category_lists_path, '{}.txt'.format(list_name))
    try:
        with open(file_name) as f:
            lines = f.read().splitlines()
    except:
        logging.exception('Unable to read "{}"'.format(file_name), exc_info=True)
        return False

    #  Remove comment and blank lines
    temp_lines = []
    for line in lines:
        if not line.strip().startswith('#') and line.strip() != '':
            temp_lines.append(line)
    del lines

    #  Parse each line and add the ip/netmask value to the hash:net ipset
    for line in temp_lines:
        ip = None
        if ',' in line:
            ip = line.split(',')[0]
        else:
            line = line.split()
            if line[0] == '127.0.0.1' or line[0] == '0.0.0.0':
                ip = resolve_hostname(line[1])
            else:
                ip = line[0]
 
        if ip:
            #  Add the netmask to IP addresses that don't have them
            if not '/' in ip:
                ip = '{}/32'.format(ip)

            # Validate the ip address format
            try:
                ipaddress.ip_address(ip.split('/')[0])
            except:
                logging.debug('"{}" is not a valid ip address'.format(ip))
                continue

            #  Loopback and private ip addresses should never be blacklisted
            if check_if_excluded(ip):
                logging.debug('{} cannot be blacklisted'.format(ip))
                continue

            #  Add the address to the ipset
            try:
                logging.debug('adding "{}" to the {} ipset'.format(ip, ipset_name))
                subprocess.run('ipset -exist add {} {}'.format(ipset_name, ip), shell=True, check=True)
            except:
                logging.exception('ERROR: ipset -exist add {} {}'.format(ipset_name, ip), exc_info=True)

if __name__ == "__main__":

    #  Define command-line options for the config file and debugging
    config_fn = '/data/blacklists/blacklists.conf'
    cmdline = OptionParser(usage="usage: %prog [-d | --debug]", description='This script configures the local system\'s iptables firewall to block traffic from the IP addresses listed in the ntopng blacklists.  It is designed to be run daily to apply the changes made to the blacklists as they are updated by ntopng.  For more details see https://daveking.com/udm-hacks/blacklists.html')
    cmdline.add_option('-c', '--config', dest='conffile', default=config_fn, help='Full path to configuration file.  Default: {}'.format(config_fn))
    cmdline.add_option('-d', '--debug', action='store_true', dest='debug', default=False, help='Write debugging messages')
    opts, args = cmdline.parse_args()
    log = logging.getLogger()
    if opts.debug:
        log.setLevel(logging.DEBUG)

    #  Execute the configuration file
    if not os.path.exists(opts.conffile):
        logging.critical('{} configuration file does not exist'.format(opts.conffile))
        exit(1)
    logging.debug('Executing the configuration file: {}'.format(opts.conffile))
    try:
        with open(opts.conffile) as f:
            code = compile(f.read(), opts.conffile, 'exec')
            exec(code)
    except:
        logging.exception('Unable to execute config file "{}"'.format(opts.conffile), exc_info=True)
        exit(1)

    #  The excluded_addresses list should have come from the config file, but if 
    #  it didn't then we'll use this one.
    try:
        excluded_addresses
    except NameError:
        excluded_addresses = [
            '0.0.0.0',
            '255.255.255.255',
            '127.0.0.0-127.255.255.255',
            '192.168.0.0-192.168.255.255',
            '10.0.0.0-10.255.255.255',
            '100.64.0.0-100.127.255.255',
            '172.16.0.0-172.31.255.255'
        ]
        
    #  Make sure that the iptables rules we need to make this all work are in place
    mk_iptables_rules()

    logging.debug('Creating temporary ipset: new_ntopng')
    subprocess.run('ipset -exist create new_ntopng "hash:net" maxelem {}'.format(maxelem), shell=True)
    subprocess.run('ipset flush new_ntopng', shell=True)

    #  Load the temporary ipset with the addresses from ntopng's active blacklists
    for ntop_path in ntop_lists_paths:
        #  Inspect all the list definitions found in ntop_list_paths directories
        for root, paths, files in os.walk(ntop_path):
            # If the list is enabled in ntopng, process it into the ipset
            for file in files:
                if os.path.splitext(file)[1] == '.list':
                    with open(os.path.join(root, file), 'r') as f:
                        list_def = json.load(f)
                        if list_def['enabled'] == True:
                            logging.info('Processing ntopng blacklist file: "{}"'.format(file))
                            load_list(list_def['name'], 'new_ntopng')
                        else:
                            logging.debug('{} is not enabled, skipping'.format(file))

    logging.debug('Swaping temporary ipset in place of the old one: ntopng') 
    subprocess.run('ipset swap new_ntopng ntopng', shell=True)
    subprocess.run('ipset destroy new_ntopng', shell=True)

