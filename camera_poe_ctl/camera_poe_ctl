#!/usr/bin/env python

#  Copyright (C) 2021  David King <dave@daveking.com>
#
#  This Source Code Form is subject to the terms of the Mozilla Public License,
#  v. 2.0.  If a copy of the MPL was not distbuted with this file, You can
#  obtain one at https://mozilla.org/MPL/2.0/.

#  Toggle POE power for a specific camera

#############################################################################################################
#  C o n f i g u r a t i o n   S e c t i o n
#############################################################################################################

#  The URL of the Unifi Dream Machine that manages the cameras.  Use "https://ubnt"
#  when running this script on the UDM itself.
udm_url = 'https://ubnt'

#  My login credentials for the Unifi Dream Machine
udm_username = ''
udm_password = ''

#############################################################################################################
#############################################################################################################

import datetime
from optparse import OptionParser
import json
import base64
import datetime
import subprocess

#  Write messages to the console and log file
#  Later Python versions may require that the print statement used in this function be modified.
def log(message):
	global opts
	timestamp = datetime.datetime.now().strftime('%Y%m%d %H:%M:%S')
	if opts.logfile:
		with open(opts.logfile, 'a') as f:
			f.write('{} {}\n'.format(timestamp, message))
	if not opts.quiet:
		print('{} {}'.format(timestamp, message))

#  Do a system notification
def notify_send(title, text):
	global opts
	if opts.notify:
		subprocess.run('notify-send -i system-shutdown "{}" "{}"'.format(title, text), shell=True)
	
#  Define command-line options to turn off console output and to log progress into a file
cmdline = OptionParser(usage="usage: %prog <camera_name> [on|off]", description='Set security camera PoE power on or off')
cmdline.add_option('-n', '--notify', action='store_true', dest='notify', default=False, help='Send system notifications when PoE changes are made or errors occur')    
cmdline.add_option('-q', '--quiet', action='store_true', dest='quiet', default=False, help='Do not print any log messages on the console')    
cmdline.add_option('-l', '--log', dest='logfile', metavar='FILE', help='Write log messages into this file')
opts, args = cmdline.parse_args()
action = None
if len(args) > 1:
	action = args[1].upper()
	if action != 'ON' and action != 'OFF':
		log('ABORT: If an action is specified it can only be either "on" or "off"')
		exit(1)
	if action == 'ON':
		action = True
	else:
		action = False

#  Handle error that occurs if the requests module is not installed
try:
	import requests

	#  Turn off warnings about the use of self-signed SSL certificates.  This code may
	#  need to be modified if you are using a later version of the requests module.
	from requests.packages.urllib3.exceptions import InsecureRequestWarning
	requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
except:
	log('ABORT: Unable to import the Python "requests" module.  Is it installed?')
	exit(1)
	
#  Login to UDM
data = {
	'username': udm_username,
	'password': udm_password,
	'rememberMe': False
}
try:
	r = requests.post(udm_url + '/api/auth/login', json=data, verify=False)
except Exception as e:
	text = 'ABORT: Unexpected exception while logging in to {}\n{}'.format(udm_url, e)
	log(text)
	notify_send('Request Exception', text)
	exit(1)
if r.status_code != 200:
	text = 'ABORT: The login failed: ' + r.text
	log(text)
	notify_send('Login Error', text)
	exit(r.status_code)
	
#  Set authorization cookies for all subsequent requests
for cookie in r.headers['Set-Cookie'].split(';'):
	if cookie.startswith('TOKEN='):
		headers = {
			'Content-Type': 'application/json; charset=utf-8',
			'Cookie': cookie + ';',
			#  The x-csrf-token is critical, without it any attempts to change
			#  any settings will fail with a "404 Not Found" error.  This token
			#  is encoded into, and must be extracted from, the TOKEN cookie.
			'x-csrf-token' : json.loads(base64.b64decode(cookie.split('=')[1].split('.')[1] + '==='))['csrfToken']
		}

#  Get the information for all of the cameras this UDM knows about
r = requests.get(udm_url + '/proxy/protect/api/bootstrap', headers=headers, verify=False)
if r.status_code != 200:
	text = 'ABORT: The request for camera information failed: ' + r.text
	log(text)
	notify_send('Request Error', text)
	exit(r.status_code)

#  Get the camera's MAC address
camera = ''
if len(args) > 0:
	camera = args[0]
camera_mac = ''
camera_list = []
for unifi_camera in r.json()['cameras']:
	camera_list.append(unifi_camera['name'])
	if unifi_camera['name'].upper() == camera.upper():
		found = True
		camera = unifi_camera['name']
		camera_mac = unifi_camera['mac'].upper()
				
if camera_mac == '':
	text = 'Unable to find a camera named "{}" on this UDM.\nThe cameras this UDM supports are:\n\t{}'.format(camera, '\n\t'.join(camera_list))
	log(text)
	notify_send('Unknown Camera', text)
	exit(1)

#  Get the MAC address of the switch and the switch port the camera is plugged into
r = requests.get(udm_url + '/proxy/network/api/s/default/stat/sta', headers=headers, verify=False)
if r.status_code != 200:
	text = 'ABORT: The request for network client information failed: ' + r.text
	log(text)
	notify_send('Request Error', text)
	exit(r.status_code)

switch_mac = ''
for client in r.json()['data']:
	client_mac = client['mac'].replace(":","").upper()
	if client_mac == camera_mac:
		switch_mac = client['sw_mac'].replace(":","").upper()
		switch_port = client['sw_port']

if switch_mac == '':
	text = 'Unable to figure out what switch port the "{}" camera is connected to'.format(camera)
	log(text)
	notify_send('Unable To Determine Switch Port', text)
	exit(1)

#  Get the switch configuration details
r = requests.get(udm_url + '/proxy/network/api/s/default/stat/device', headers=headers, verify=False)
if r.status_code != 200:
	text = 'ABORT: The request for switch configuration information failed: ' + r.text
	log(text)
	notify_send('Request Error', text)
	exit(r.status_code)

device_config = ''
device_id = ''
for device in r.json()['data']:
	device_mac = device['mac'].replace(":","").upper()
	if device_mac == switch_mac:
		device_config = device
		device_id = device['_id']

if device_config == '':
	text = 'Unable to get the configuration information for the switch that "{}" is connected to'.format(camera)
	log(text)
	notify_send('Unable ToGet Switch Configuration', text)
	exit(1)

#  Get current POE status from the switch's port_table and define a port_override
#  json dictionary for the camera port
for port in device_config['port_table']:
	if port['port_idx'] == switch_port:
		try:
			poe_status = port['poe_enable']
			port_override = {
				'autoneg': port['autoneg'],
				'full_duplex': port['full_duplex'],
				'port_idx': port['port_idx'],
				'port_security_mac_address': [],
				'portconf_id': port['portconf_id'],
				'speed': port['speed']
			}
		except KeyError as e:
			text = 'Missing port attribute: {}'.format(e)
			log(text)
			notify_send('Unable To Determine PoE Status', text)
			exit(1)
		except Exception as e:
			log('ABORT: Unexpected exception: {}'.format(e))
			notify_send('Unexpected Exception', e)
			exit(1)

#  Submit request to change the port's poe_mode based on current status and action specified 
if action == None:
	action = not poe_status
if poe_status and action:
	log('"{}" camera PoE is already on, nothing to do'.format(camera))
elif not poe_status and not action:
	log('"{}" camera PoE is already off, nothing to do'.format(camera))
else:
	if action:
		log('Turning PoE on for {} camera'.format(camera))
		port_override['poe_mode'] = 'auto'
		title = 'Turned On {} Camera'.format(camera)
		text = 'PoE power for the {} camera has been turned on'.format(camera)
	else:
		log('Turning PoE off for {} camera'.format(camera))
		port_override['poe_mode'] = 'off'
		title = 'Turned Off {} Camera'.format(camera)
		text = 'PoE power for the {} camera has been turned off'.format(camera)
	data = {
		'port_overrides': [port_override]
	} 
	r = requests.put(udm_url + '/proxy/network/api/s/default/rest/device/' + device_id, json=data, headers=headers, verify=False)
	if r.status_code != 200:
		log('ABORT: The request to set poe_mode for the "' + camera + '" camera failed: ' + r.text)
		exit(r.status_code)
	log('Successfully completed')
	notify_send(title, text)
