#!/usr/bin/env python

#  Turn off the POE power to a list of cameras that are being controlled by a Ubiquiti 
#  Dream Machine unless SmartThings says that the location mode is "Away."

#  Copyright (C) 2023  David King <dave@daveking.com>
#
#  This Source Code Form is subject to the terms of the Mozilla Public License,
#  v. 2.0.  If a copy of the MPL was not distbuted with this file, You can
#  obtain one at https://mozilla.org/MPL/2.0/.

#  Configure logging
import logging
log_datefmt = '%d-%b-%y %H:%M:%S'
logging.basicConfig(format='%(asctime)s: %(levelname)s: %(message)s', datefmt=log_datefmt, level=logging.INFO)

#  Import dependencies
import os
import sys
from optparse import OptionParser
import json
import smtplib

#  Handle error that occurs if the requests module is not installed
try:
	import requests

	#  Turn off warnings about the use of self-signed SSL certificates.  This code may
	#  need to be modified if you are using a later version of the requests module.
	from requests.packages.urllib3.exceptions import InsecureRequestWarning
	requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
except ModuleNotFoundError:
	logging.error('Unable to import the Python "requests" module.  Is it installed?')
	exit(1)
except:
	logging.exception('Unexpected exception while importing requests module:', exc_info=True)
	exit(1)

#  Handle error that occurs if my custom udm API module is not present
try:
	import udm
except ModuleNotFoundError:
	logging.error('Unable to import the Python "udm" module that ships with this script.')
	exit(1)	
except:
	logging.exception('Unexpected exception while importing udm module:', exc_info=True)
	exit(1)	

#  Return true if the SmartThings location mode is "Away".
def smartthingsAway(url, location_name, api_token):

	headers = {
		'Authorization': 'Bearer ' + api_token
	}
	   
	#  Get the locationId for the location with the specified name
	logging.debug('Getting locationId from SmartThings for "{}" location'.format(location_name))
	locationId = ''
	r = requests.get(url + 'locations', headers=headers)
	if r.status_code != 200:
		logging.error(r.text)
		return False
	for item in r.json()['items']:
		if item['name'] == location_name:
			locationId = item['locationId']
			logging.debug('SmartThings locationId: {}'.format(locationId))
	if locationId == '':
		logging.error('Unable to get the locationId for the location named "{}"'.format(location_name))
		logging.error('HTTP status code = {}'.format(r.status_code))
		logging.error('Request response text: {}'.format(r.text))
		return False

	#  Get the "mode" at that location: Home, Away, Night
	logging.debug('Getting current location mode for "{}" location'.format(location_name))
	location_mode = ''
	r = requests.get(url + 'locations/' + locationId + '/modes/current', headers=headers)
	if r.status_code != 200:
		logging.error(r.text)
		return False
	location_mode = r.json()['name']
	logging.info('SmartThings location "{}" is in mode "{}"'.format(location_name, location_mode))
	if location_mode == '':
		logging.error('Unable to get the curreent mode for the location named "{}"'.format(location_name))
		logging.error('HTTP status code = {}'.format(r.status_code))
		logging.error('Request response text: {}'.format(r.text))
		return False
	
	if location_mode == 'Away':
		return True
	return False

#  Send an email message to a list of addresses
def sendMail(address_list=[], message=''):
	logging.debug('Sending email message:\n{}'.format(message))
	try:
		if len(address_list) > 0:
			with smtplib.SMTP(smtpHost, port=smtpPort) as smtp:
				if smtpStartTLS:
					smtp.starttls()
				smtp.login(smtpUserid, smtpPassword)
				for address in address_list:
					logging.debug('Sending email message to {}'.format(address))
					smtp.sendmail(emailFromAddress, address, 'From: {}\nSubject: {}'.format(emailFromAddress, message))
	except:
		logging.exception('Unexpected exception while sending email:\nTo: {}\nMessage: {}'.format(address_list, message), exc_info=True)
	
if __name__ == "__main__":

	#  Define command-line options for the config file and debugging
	config_fn = os.path.abspath(sys.argv[0]) + '.conf'
	cmdline = OptionParser(usage="usage: %prog [-d | --debug]", description='Only power on certain security cameras attached to a Ubiquity Dream Machine when SmartThings says that a location is in "Away" mode.')
	cmdline.add_option('-c', '--config', dest='conffile', default=config_fn, help='Full path to configuration file.  Default: {}'.format(config_fn))
	cmdline.add_option('-d', '--debug', action='store_true', dest='debug', default=False, help='Write debugging messages to the log file specified in the config file')
	opts, args = cmdline.parse_args()
	log = logging.getLogger()
	if opts.debug:
		log.setLevel(logging.DEBUG)

	#  Default configuration settings, overridden by what's in the configuration file
	udmHostName = 'localhost.localdomain'
	udmUsername = ''                                                       
	udmPassword = ''                                                 
	smartthingsURL = 'https://api.smartthings.com/v1/'                            
	smartthingsToken = ''                      
	smartthingsLocationName = 'Home'                                               
	cameraList = []                                       
	emailAddressList = []                       
	emailFromAddress = 'camera_poe_ctl@localhost.localdomain'                            
	smtpHost = ''     
	smtpPort = 25                                                               
	smtpStartTLS = False                                                           
	smtpUserid = ''                                              
	smtpPassword = ''                                           
	cameraDetailsFile = '~/camera_poe_ctl.camera_list.json'
	logFileName = '' 

	#  Execute the configuration file
	logging.debug('Executing the configuration file: {}'.format(opts.conffile))
	try:
		with open(opts.conffile) as f:
			code = compile(f.read(), opts.conffile, 'exec')
			exec(code)
	except FileNotFoundError:
		logging.error('Config file "{}" not found'.format(opts.conffile))
		exit(1)
	except:
		logging.exception('Unable to execute config file "{}"'.format(opts.conffile), exc_info=True)
		exit(1)
		
	#  If config file specified a log file then reconfigure logging
	if logFileName != '':
		try:
			if log.hasHandlers():
				log.handlers.clear()
			handler = logging.FileHandler(logFileName)
			formatter = logging.Formatter(fmt='%(asctime)s: %(levelname)s: %(message)s', datefmt=log_datefmt)
			handler.setFormatter(formatter)
			log.addHandler(handler)
		except:
			logging.eeception('Unexpected exception while setting log file to {}'.format(config('logFileName')), exc_info=True)
			exit(1)
	
	#  Connect to the UDM
	udm = udm.UDM(udmHostName, udmUsername, udmPassword, cameraDetailsFile)

	#  If SmartThings says location mode is "Away," turn on the cameras.  Otherwise, turn
	#  them off.
	away = smartthingsAway(smartthingsURL, smartthingsLocationName, smartthingsToken)
	for camera_name in cameraList:
		for udm_camera in udm.cameras:
			if camera_name == udm_camera.name:
				if away:
					if udm_camera.setPOE('ON'):
						sendMail(emailAddressList, '{} camera powered on'.format(camera_name))
				else:
					if udm_camera.setPOE('OFF'):
						sendMail(emailAddressList, '{} camera powered off'.format(camera_name))
				break
